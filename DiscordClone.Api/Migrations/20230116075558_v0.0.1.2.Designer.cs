// <auto-generated />
using System;
using DiscordClone.Api.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiscordClone.Api.Migrations
{
    [DbContext(typeof(DiscordCloneContext))]
    [Migration("20230116075558_v0.0.1.2")]
    partial class v0012
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("BaseEntitySequence");

            modelBuilder.Entity("DiscordClone.Api.Entities.Base.BaseEntity<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Base.BaseEntity<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [BaseEntitySequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Base.BaseChat<DiscordClone.Api.Entities.ChatMessage, DiscordClone.Api.Entities.AccountChat>", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<System.Guid>");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Base.BaseChat<DiscordClone.Api.Entities.GroupChatMessage, DiscordClone.Api.Entities.AccountGroupChat>", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<System.Guid>");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.SecurityCredentials", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<System.Guid>");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("SecurityCredentials", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.User", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<System.Guid>");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("PasswordSetDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Account", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<int>");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastLogonDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ImageId")
                        .IsUnique()
                        .HasFilter("[ImageId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.AccountChat", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<int>");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("AccountId");

                    b.HasIndex("ChatId");

                    b.ToTable("AccountChats", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.AccountGroupChat", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<int>");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("AccountId");

                    b.HasIndex("ChatId");

                    b.ToTable("AccountGroupChats", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Base.BaseChannel<DiscordClone.Api.Entities.RoleGeneralTextChannelPermission>", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<int>");

                    b.Property<bool>("IsAgeRestricted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Base.BaseChannel<DiscordClone.Api.Entities.RoleGeneralVoiceChannelPermission>", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<int>");

                    b.Property<bool>("IsAgeRestricted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Base.BaseChannelSetting<DiscordClone.Api.Entities.TextChannel>", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<int>");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Base.BaseChannelSetting<DiscordClone.Api.Entities.VoiceChannel>", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<int>");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Base.BaseImage", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<int>");

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("varbinary(4000)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(8,0)");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Base.BaseMessage<DiscordClone.Api.Entities.Chat, System.Guid>", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<int>");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("EditedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasIndex("AccountId");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Base.BaseMessage<DiscordClone.Api.Entities.GroupChat, System.Guid>", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<int>");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("EditedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasIndex("AccountId");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Base.BaseMessageAttachment<DiscordClone.Api.Entities.Chat, System.Guid, DiscordClone.Api.Entities.ChatMessage>", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<int>");

                    b.Property<string>("FileLocation")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Base.BaseMessageAttachment<DiscordClone.Api.Entities.GroupChat, System.Guid, DiscordClone.Api.Entities.GroupChatMessage>", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<int>");

                    b.Property<string>("FileLocation")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Base.BaseMessageAttachment<DiscordClone.Api.Entities.TextChannel, int, DiscordClone.Api.Entities.TextChannelMessage>", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<int>");

                    b.Property<string>("FileLocation")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Base.BasePermission", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<int>");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Base.BaseRolePermission", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<int>");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasIndex("PermissionId")
                        .IsUnique();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Friend", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<int>");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("AccountId1")
                        .HasColumnType("int");

                    b.Property<int>("AccountId2")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasIndex("AccountId");

                    b.HasIndex("AccountId1");

                    b.HasIndex("AccountId2");

                    b.ToTable("Friends", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.PreviousRegisteredEmailLookup", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<int>");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<byte[]>("EmailHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varbinary(100)");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.ToTable("PreviousRegisteredEmailLookups", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Role", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<int>");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsServerAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.HasIndex("ServerId");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.SecurityQuestion", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<int>");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LookupId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasIndex("LookupId");

                    b.ToTable("SecurityQuestions", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Server", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<int>");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Servers", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.ServerProfile", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<int>");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.HasIndex("AccountId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ServerId");

                    b.ToTable("ServerProfiles", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.TextChannelMessage", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseEntity<int>");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("datetime2");

                    b.HasIndex("AccountId");

                    b.HasIndex("ChatId");

                    b.ToTable("TextChannelMessages", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Chat", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseChat<DiscordClone.Api.Entities.ChatMessage, DiscordClone.Api.Entities.AccountChat>");

                    b.ToTable("Chats", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.GroupChat", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseChat<DiscordClone.Api.Entities.GroupChatMessage, DiscordClone.Api.Entities.AccountGroupChat>");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasIndex("OwnerId")
                        .IsUnique()
                        .HasFilter("[OwnerId] IS NOT NULL");

                    b.ToTable("GroupChats", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.TextChannel", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseChannel<DiscordClone.Api.Entities.RoleGeneralTextChannelPermission>");

                    b.HasIndex("ServerId");

                    b.ToTable("TextChannels", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.VoiceChannel", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseChannel<DiscordClone.Api.Entities.RoleGeneralVoiceChannelPermission>");

                    b.HasIndex("ServerId");

                    b.ToTable("VoiceChannels", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.TextChannelSetting", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseChannelSetting<DiscordClone.Api.Entities.TextChannel>");

                    b.HasIndex("ChannelId");

                    b.ToTable("TextChannelSettings", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.VoiceChannelSetting", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseChannelSetting<DiscordClone.Api.Entities.VoiceChannel>");

                    b.HasIndex("ChannelId");

                    b.ToTable("VoiceChannelSettings", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.AccountImage", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseImage");

                    b.ToTable("AccountImages", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.ServerProfileImage", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseImage");

                    b.Property<int>("ServerProfileId")
                        .HasColumnType("int");

                    b.HasIndex("ServerProfileId")
                        .IsUnique()
                        .HasFilter("[ServerProfileId] IS NOT NULL");

                    b.ToTable("ServerProfileImages", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.ChatMessage", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseMessage<DiscordClone.Api.Entities.Chat, System.Guid>");

                    b.HasIndex("ChatId");

                    b.ToTable("ChatMessages", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.GroupChatMessage", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseMessage<DiscordClone.Api.Entities.GroupChat, System.Guid>");

                    b.HasIndex("ChatId");

                    b.ToTable("GroupChatMessages", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.ChatMessageAttachment", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseMessageAttachment<DiscordClone.Api.Entities.Chat, System.Guid, DiscordClone.Api.Entities.ChatMessage>");

                    b.HasIndex("MessageId");

                    b.ToTable("ChatMessageAttachments", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.GroupChatMessageAttachment", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseMessageAttachment<DiscordClone.Api.Entities.GroupChat, System.Guid, DiscordClone.Api.Entities.GroupChatMessage>");

                    b.HasIndex("MessageId");

                    b.ToTable("GroupChatMessageAttachments", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.TextChannelMessageAttachment", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseMessageAttachment<DiscordClone.Api.Entities.TextChannel, int, DiscordClone.Api.Entities.TextChannelMessage>");

                    b.HasIndex("MessageId");

                    b.ToTable("TextChannelMessageAttachments", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.ChannelPermission", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BasePermission");

                    b.ToTable("ChannelPermissions", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.ServerPermission", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BasePermission");

                    b.ToTable("ServerPermissions", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.RoleGeneralServerPermission", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseRolePermission");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleGeneralServerPermissions", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.RoleGeneralVoiceChannelPermission", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseRolePermission");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.HasIndex("EntityId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleGeneralVoiceChannelPermissions", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.RoleMembershipPermission", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseRolePermission");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleMembershipPermissions", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.RoleTextChannelPermission", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseRolePermission");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.HasIndex("EntityId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleTextChannelPermissions", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.RoleVoiceChannelPermission", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Base.BaseRolePermission");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.HasIndex("EntityId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleVoiceChannelPermissions", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.SecurityCredentials", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("DiscordClone.Api.Entities.SecurityCredentials", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Account", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.AccountImage", "Image")
                        .WithOne()
                        .HasForeignKey("DiscordClone.Api.Entities.Account", "ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("DiscordClone.Api.Entities.Account", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.AccountChat", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Account", "Account")
                        .WithMany("AccountChats")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.Chat", "Chat")
                        .WithMany("ChatRelations")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.AccountGroupChat", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Account", "Account")
                        .WithMany("AccountGroupChats")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.GroupChat", "GroupChat")
                        .WithMany("ChatRelations")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("GroupChat");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Base.BaseMessage<DiscordClone.Api.Entities.Chat, System.Guid>", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Base.BaseMessage<DiscordClone.Api.Entities.GroupChat, System.Guid>", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Base.BaseRolePermission", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Base.BasePermission", "Permission")
                        .WithOne()
                        .HasForeignKey("DiscordClone.Api.Entities.Base.BaseRolePermission", "PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Friend", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Account", null)
                        .WithMany("Friends")
                        .HasForeignKey("AccountId");

                    b.HasOne("DiscordClone.Api.Entities.Account", "Account1")
                        .WithMany()
                        .HasForeignKey("AccountId1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.Account", "Account2")
                        .WithMany()
                        .HasForeignKey("AccountId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account1");

                    b.Navigation("Account2");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.PreviousRegisteredEmailLookup", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Account", "Account")
                        .WithOne()
                        .HasForeignKey("DiscordClone.Api.Entities.PreviousRegisteredEmailLookup", "AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Role", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Server", "Server")
                        .WithMany("Roles")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.SecurityQuestion", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.PreviousRegisteredEmailLookup", "Lookup")
                        .WithMany("Questions")
                        .HasForeignKey("LookupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lookup");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Server", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("DiscordClone.Api.Entities.Server", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.ServerProfile", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Account", "Account")
                        .WithMany("ServerProfiles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.Role", null)
                        .WithMany("Profiles")
                        .HasForeignKey("RoleId");

                    b.HasOne("DiscordClone.Api.Entities.Server", "Server")
                        .WithMany("ServerProfiles")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.TextChannelMessage", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.TextChannel", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.GroupChat", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Account", "Owner")
                        .WithOne()
                        .HasForeignKey("DiscordClone.Api.Entities.GroupChat", "OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.TextChannel", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Server", "Server")
                        .WithMany("TextChannels")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.VoiceChannel", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Server", "Server")
                        .WithMany("VoiceChannels")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.TextChannelSetting", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.TextChannel", "Channel")
                        .WithMany("TextChannelSettings")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.VoiceChannelSetting", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.VoiceChannel", "Channel")
                        .WithMany("VoiceChannelSettings")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.ServerProfileImage", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.ServerProfile", "ServerProfile")
                        .WithOne("Image")
                        .HasForeignKey("DiscordClone.Api.Entities.ServerProfileImage", "ServerProfileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ServerProfile");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.ChatMessage", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.GroupChatMessage", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.GroupChat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.ChatMessageAttachment", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.ChatMessage", "Message")
                        .WithMany("MessageAttachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.GroupChatMessageAttachment", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.GroupChatMessage", "Message")
                        .WithMany("MessageAttachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.TextChannelMessageAttachment", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.TextChannelMessage", "Message")
                        .WithMany("MessageAttachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.RoleGeneralServerPermission", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Role", "Role")
                        .WithMany("RoleGeneralServerPermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.RoleGeneralVoiceChannelPermission", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.VoiceChannel", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.Role", "Role")
                        .WithMany("RoleGeneralVoiceChannelPermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.RoleMembershipPermission", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Role", "Role")
                        .WithMany("RoleMembershipPermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.RoleTextChannelPermission", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.TextChannel", "Entity")
                        .WithMany("Permissions")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.Role", "Role")
                        .WithMany("RoleTextChannelPermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.RoleVoiceChannelPermission", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.VoiceChannel", "Entity")
                        .WithMany("Permissions")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.Role", "Role")
                        .WithMany("RoleVoiceChannelPermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.User", b =>
                {
                    b.Navigation("Account");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Account", b =>
                {
                    b.Navigation("AccountChats");

                    b.Navigation("AccountGroupChats");

                    b.Navigation("Friends");

                    b.Navigation("ServerProfiles");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.PreviousRegisteredEmailLookup", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Role", b =>
                {
                    b.Navigation("Profiles");

                    b.Navigation("RoleGeneralServerPermission");

                    b.Navigation("RoleGeneralVoiceChannelPermission");

                    b.Navigation("RoleMembershipPermission");

                    b.Navigation("RoleTextChannelPermission");

                    b.Navigation("RoleVoiceChannelPermission");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Server", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("ServerProfiles");

                    b.Navigation("TextChannels");

                    b.Navigation("VoiceChannels");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.ServerProfile", b =>
                {
                    b.Navigation("Image")
                        .IsRequired();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.TextChannelMessage", b =>
                {
                    b.Navigation("MessageAttachments");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Chat", b =>
                {
                    b.Navigation("ChatRelations");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.GroupChat", b =>
                {
                    b.Navigation("ChatRelations");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.TextChannel", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Permissions");

                    b.Navigation("TextChannelSettings");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.VoiceChannel", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("VoiceChannelSettings");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.ChatMessage", b =>
                {
                    b.Navigation("MessageAttachments");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.GroupChatMessage", b =>
                {
                    b.Navigation("MessageAttachments");
                });
#pragma warning restore 612, 618
        }
    }
}
