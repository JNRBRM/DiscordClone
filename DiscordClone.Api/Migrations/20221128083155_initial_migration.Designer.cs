// <auto-generated />
using System;
using DiscordClone.Api.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiscordClone.Api.Migrations
{
    [DbContext(typeof(DiscordCloneContext))]
    [Migration("20221128083155_initial_migration")]
    partial class initialmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("AccountImageSequence");

            modelBuilder.HasSequence("AccountSequence");

            modelBuilder.HasSequence("BaseChannelSequence");

            modelBuilder.HasSequence("BasePermissionSequence");

            modelBuilder.HasSequence("FriendSequence");

            modelBuilder.HasSequence("MessageAttachmentSequence");

            modelBuilder.HasSequence("MessageSequence");

            modelBuilder.HasSequence("PreviousRegisteredEmailLookupSequence");

            modelBuilder.HasSequence("ProfileImageSequence");

            modelBuilder.HasSequence("RoleGeneralChannelPermissionSequence");

            modelBuilder.HasSequence("RoleGeneralServerPermissionSequence");

            modelBuilder.HasSequence("RoleMembershipPermissionSequence");

            modelBuilder.HasSequence("RoleSequence");

            modelBuilder.HasSequence("RoleTextChannelPermissionSequence");

            modelBuilder.HasSequence("RoleVoiceChannelPermissionSequence");

            modelBuilder.HasSequence("SecurityQuestionSequence");

            modelBuilder.HasSequence("ServerProfileSequence");

            modelBuilder.HasSequence("ServerSequence");

            modelBuilder.HasSequence("TextChannelSettingSequence");

            modelBuilder.HasSequence("VoiceChannelSettingSequence");

            modelBuilder.Entity("DiscordClone.Api.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [AccountSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<int>("AccountImageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime?>("LastLogonDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountImageId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Accounts", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.AccountChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ChatId");

                    b.ToTable("AccountChat");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.AccountImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [AccountImageSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("varbinary(4000)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("AccountImages", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.BaseChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [BaseChannelSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<bool>("IsAgeRestricted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.BasePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [BasePermissionSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.ToTable("Chats", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [FriendSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("AccountId1")
                        .HasColumnType("int");

                    b.Property<int>("AccountId2")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AccountId1");

                    b.HasIndex("AccountId2");

                    b.ToTable("Friends", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.GroupChat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("GroupChats", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.GroupChatAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<Guid>("GroupChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GroupChatId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("GroupChatId")
                        .IsUnique();

                    b.HasIndex("GroupChatId1");

                    b.ToTable("GroupChatAccount");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Message<DiscordClone.Api.Entities.Chat, System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [MessageSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("EditedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Message<DiscordClone.Api.Entities.GroupChat, System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Message<GroupChat, Guid>");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Message<GroupChat, Guid>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Message<DiscordClone.Api.Entities.TextChannel, int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Message<TextChannel, int>");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Message<TextChannel, int>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.MessageAttachment<DiscordClone.Api.Entities.Chat, System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageAttachment<Chat, Guid>");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.MessageAttachment<DiscordClone.Api.Entities.GroupChat, System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [MessageAttachmentSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("FileLocation")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.MessageAttachment<DiscordClone.Api.Entities.TextChannel, int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [MessageAttachmentSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("FileLocation")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.PreviousRegisteredEmailLookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [PreviousRegisteredEmailLookupSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<byte[]>("EmailHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varbinary(100)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("PreviousRegisteredEmailLookups", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.ProfileImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [ProfileImageSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("varbinary(4000)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ProfileImages", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [RoleSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsServerAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Roles", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.RoleGeneralChannelPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [RoleGeneralChannelPermissionSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("PermissionId")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("RoleGeneralChannelPermissions", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.RoleGeneralServerPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [RoleGeneralServerPermissionSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleGeneralServerPermissions", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.RoleMembershipPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [RoleMembershipPermissionSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleMembershipPermissions", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.RoleTextChannelPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [RoleTextChannelPermissionSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleTextChannelPermissions", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.RoleVoiceChannelPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [RoleVoiceChannelPermissionSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleVoiceChannelPermissions", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.SecurityCredentials", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SecurityCredentials", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.SecurityQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [SecurityQuestionSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LookupId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("SecurityQuestions", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Server", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [ServerSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Servers", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.ServerProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [ServerProfileSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("BaseChannelId")
                        .HasColumnType("int");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("ProfileImageId")
                        .HasColumnType("int");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BaseChannelId");

                    b.HasIndex("ProfileImageId");

                    b.HasIndex("ServerId");

                    b.ToTable("ServerProfiles", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.TextChannelSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [TextChannelSettingSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TextChannelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("TextChannelId");

                    b.ToTable("TextChannelSettings", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("PasswordSetDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.VoiceChannelSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [VoiceChannelSettingSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("VoiceChannelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("VoiceChannelId");

                    b.ToTable("VoiceChannelSettings", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.TextChannel", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.BaseChannel");

                    b.HasIndex("ServerId");

                    b.ToTable("TextChannels", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.VoiceChannel", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.BaseChannel");

                    b.HasIndex("ServerId");

                    b.ToTable("VoiceChannels", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.ChannelPermission", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.BasePermission");

                    b.ToTable("ChannelPermissions");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.ServerPermission", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.BasePermission");

                    b.ToTable("ServerPermissions", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.ChatMessage", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Message<DiscordClone.Api.Entities.Chat, System.Guid>");

                    b.HasIndex("ChatId");

                    b.ToTable("ChatMessages", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.GroupChatMessage", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Message<DiscordClone.Api.Entities.GroupChat, System.Guid>");

                    b.HasIndex("ChatId");

                    b.HasDiscriminator().HasValue("GroupChatMessage");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.TextChannelMessage", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.Message<DiscordClone.Api.Entities.TextChannel, int>");

                    b.HasIndex("ChatId");

                    b.HasDiscriminator().HasValue("TextChannelMessage");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.ChatMessageAttachment", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.MessageAttachment<DiscordClone.Api.Entities.Chat, System.Guid>");

                    b.ToTable("ChatMessageAttachments", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.GroupChatMessageAttachment", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.MessageAttachment<DiscordClone.Api.Entities.GroupChat, System.Guid>");

                    b.ToTable("GroupChatMessageAttachments", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.TextChannelMessageAttachment", b =>
                {
                    b.HasBaseType("DiscordClone.Api.Entities.MessageAttachment<DiscordClone.Api.Entities.TextChannel, int>");

                    b.ToTable("TextChannelMessageAttachments", (string)null);
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Account", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.AccountImage", "Image")
                        .WithMany()
                        .HasForeignKey("AccountImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.Role", null)
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId");

                    b.HasOne("DiscordClone.Api.Entities.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("DiscordClone.Api.Entities.Account", "UserId");

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.AccountChat", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Account", "Account")
                        .WithMany("Chats")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.Chat", "Chat")
                        .WithMany("Accounts")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Friend", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Account", null)
                        .WithMany("Friends")
                        .HasForeignKey("AccountId");

                    b.HasOne("DiscordClone.Api.Entities.Account", "Account1")
                        .WithMany()
                        .HasForeignKey("AccountId1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.Account", "Account2")
                        .WithMany()
                        .HasForeignKey("AccountId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account1");

                    b.Navigation("Account2");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.GroupChatAccount", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.GroupChat", "GroupChat")
                        .WithOne("Owner")
                        .HasForeignKey("DiscordClone.Api.Entities.GroupChatAccount", "GroupChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.GroupChat", null)
                        .WithMany("Accounts")
                        .HasForeignKey("GroupChatId1");

                    b.Navigation("Account");

                    b.Navigation("GroupChat");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Message<DiscordClone.Api.Entities.Chat, System.Guid>", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Message<DiscordClone.Api.Entities.GroupChat, System.Guid>", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Message<DiscordClone.Api.Entities.TextChannel, int>", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.MessageAttachment<DiscordClone.Api.Entities.Chat, System.Guid>", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Message<DiscordClone.Api.Entities.Chat, System.Guid>", "Message")
                        .WithMany("MessageAttachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.MessageAttachment<DiscordClone.Api.Entities.GroupChat, System.Guid>", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Message<DiscordClone.Api.Entities.GroupChat, System.Guid>", "Message")
                        .WithMany("MessageAttachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.MessageAttachment<DiscordClone.Api.Entities.TextChannel, int>", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Message<DiscordClone.Api.Entities.TextChannel, int>", "Message")
                        .WithMany("MessageAttachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.PreviousRegisteredEmailLookup", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Role", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Server", "Server")
                        .WithMany("Roles")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.RoleGeneralChannelPermission", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.BaseChannel", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.BasePermission", "Permission")
                        .WithOne()
                        .HasForeignKey("DiscordClone.Api.Entities.RoleGeneralChannelPermission", "PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.Role", "Role")
                        .WithMany("RoleGeneralChannelPermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.RoleGeneralServerPermission", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.BasePermission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.Role", "Role")
                        .WithMany("RoleGeneralServerPermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.RoleMembershipPermission", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.BasePermission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.Role", "Role")
                        .WithMany("RoleMembershipPermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.RoleTextChannelPermission", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.TextChannel", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.BasePermission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.Role", "Role")
                        .WithMany("RoleTextChannelPermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.RoleVoiceChannelPermission", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.VoiceChannel", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.BasePermission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.Role", "Role")
                        .WithMany("RoleVoiceChannelPermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.SecurityCredentials", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.SecurityQuestion", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.PreviousRegisteredEmailLookup", "Lookup")
                        .WithMany("Questions")
                        .HasForeignKey("LookupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lookup");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Server", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.ServerProfile", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Account", "Account")
                        .WithMany("ServerProfiles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.BaseChannel", null)
                        .WithMany("ServerProfile")
                        .HasForeignKey("BaseChannelId");

                    b.HasOne("DiscordClone.Api.Entities.ProfileImage", "Image")
                        .WithMany()
                        .HasForeignKey("ProfileImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.Server", "Server")
                        .WithMany("ServerProfiles")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Image");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.TextChannelSetting", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.BaseChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.TextChannel", null)
                        .WithMany("TextChannelSettings")
                        .HasForeignKey("TextChannelId");

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.VoiceChannelSetting", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.BaseChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscordClone.Api.Entities.VoiceChannel", null)
                        .WithMany("VoiceChannelSettings")
                        .HasForeignKey("VoiceChannelId");

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.TextChannel", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Server", "Server")
                        .WithMany("TextChannels")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.VoiceChannel", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Server", "Server")
                        .WithMany("VoiceChannels")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.ChatMessage", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.GroupChatMessage", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.GroupChat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.TextChannelMessage", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.TextChannel", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.ChatMessageAttachment", b =>
                {
                    b.HasOne("DiscordClone.Api.Entities.MessageAttachment<DiscordClone.Api.Entities.Chat, System.Guid>", null)
                        .WithOne()
                        .HasForeignKey("DiscordClone.Api.Entities.ChatMessageAttachment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Account", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Friends");

                    b.Navigation("ServerProfiles");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.BaseChannel", b =>
                {
                    b.Navigation("ServerProfile");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Chat", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.GroupChat", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Messages");

                    b.Navigation("Owner")
                        .IsRequired();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Message<DiscordClone.Api.Entities.Chat, System.Guid>", b =>
                {
                    b.Navigation("MessageAttachments");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Message<DiscordClone.Api.Entities.GroupChat, System.Guid>", b =>
                {
                    b.Navigation("MessageAttachments");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Message<DiscordClone.Api.Entities.TextChannel, int>", b =>
                {
                    b.Navigation("MessageAttachments");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.PreviousRegisteredEmailLookup", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Role", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("RoleGeneralChannelPermission");

                    b.Navigation("RoleGeneralServerPermission");

                    b.Navigation("RoleMembershipPermission");

                    b.Navigation("RoleTextChannelPermission");

                    b.Navigation("RoleVoiceChannelPermission");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.Server", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("ServerProfiles");

                    b.Navigation("TextChannels");

                    b.Navigation("VoiceChannels");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.User", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.TextChannel", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("TextChannelSettings");
                });

            modelBuilder.Entity("DiscordClone.Api.Entities.VoiceChannel", b =>
                {
                    b.Navigation("VoiceChannelSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
